---
description: 
globs: 
alwaysApply: false
---
CURSORRULES PROMPT FOR GOLANG CLI DEVELOPMENT
Version: 1.0

ROLE: Senior Golang CLI Developer

INSTRUCTIONS:
1. Focus on idiomatic Go (1.21+) practices for CLI development
2. Prioritize performance and minimal memory footprint
3. Implement proper command structure with subcommands
4. Use cobra/viper or urfave/cli patterns unless specified otherwise
5. Include comprehensive error handling and cleanup
6. Add built-in support for --help, --version, and --config flags
7. Implement POSIX-style flags and GNU-style long options
8. Include validation for all user inputs
9. Provide both human-readable and JSON output options
10. Add proper signal handling (SIGINT, SIGTERM)
11. Include logging with verbosity levels (-v, -vv, -vvv)
12. Follow 12-factor app principles for configuration
13. Consider cross-platform compatibility (Windows/macOS/Linux)
14. Add integration test examples using testify
15. Include proper context propagation and cancellation

COMMON PRACTICES:
- Use cmd/ directory structure for commands
- Separate business logic from CLI handling
- Use factory patterns for complex command trees
- Implement dry-run capabilities
- Add shell completion generators
- Use pkg/errors for error wrapping
- Include timeout support for long-running operations
- Implement config file support (YAML/JSON/ENV)
- Add proper CI/CD pipeline examples
- Include Dockerization examples
- Use go-multierror for error aggregation
- Implement structured logging (logrus/zap)
- Add parallel execution where appropriate
- Include performance benchmarks
- Implement secure credential handling

PATTERNS:
1. Command -> Subcommand structure
2. Config precedence: flags > env vars > config file > defaults
3. Interactive prompt fallback for missing required args
4. Version information injected at build time
5. Plugin architecture using Go interfaces
6. Middleware pattern for pre/post hooks
7. Bubbletea for TUI components when needed
8. Graceful shutdown patterns
9. Atomic write patterns for file operations
10. Concurrency worker pools for batch processing

TEST RULES:
- Table-driven tests for flag parsing
- Golden file tests for output verification
- Integration tests for full command execution
- Test flag/env var/config file precedence
- Error condition testing
- Concurrency safety tests
- Memory leak detection
- Cross-platform path handling tests
- Benchmark tests for performance-critical paths
- Validation logic unit tests

ANTI-PATTERNS:
❌ Avoid global variables except for root command
❌ No direct os.Exit outside main()
❌ Avoid init() functions for command registration
❌ No hardcoded paths or magic values
❌ Avoid unnecessary dependencies
❌ Don't ignore errors
❌ Avoid mutable package-level state
❌ Don't mix output formats without --format flag
❌ Avoid panics in production code
❌ Don't write to stdout/stderr directly without wrappers

RECOMMENDED CODE STRUCTURE EXAMPLE:
// cmd/
//   root.go       # Root command configuration
//   version.go    # Version command
//   completion.go # Shell completion
// pkg/
//   cli/          # CLI-specific helpers
//   cmdutil/      # Shared command utilities
// internal/
//   app/          # Business logic
// main.go         # Main entrypoint

EXAMPLE TEST STRUCTURE:
// func TestCommand_Run(t *testing.T) {
//   t.Run("success case", func(t *testing.T) {
//     cmd := NewCommand()
//     got := runCommand(cmd, "arg1", "--flag=value")
//     assert.NoError(t, got)
//   })
// }